This question teaches the programmer a really important data structure which doesn't get much attention, and is quite helpful to solve a particular type of problems. It is the Disjoint Set.
I came across a similar problem on SPOJ. After implementing Disjoint Set and I searched for more such questions online, but such problems are rare.
This problem is an attempt to provide one more opportunity to programmers, to sharpen their skill in this area.

Problem Difficulty: easy-medium
Requires knowledge of Disjoint Set union(), and getRoot().


Consistency in given equations and inequations


Given the number of numbers N, a list of equalities (a = b) and a list of inqualities (a != b), check if they are consistent (i.e. all of them are satisfied).



Constraints:

1 <= a, b <= N

1 <= N <= 106



Example1:

Input: N = 3, equalities = [[1, 2], [1, 3]], inequalities = [[2, 3]]

Since 1 = 2 and 1 = 3, 1 = 2 = 3. The inequality 2 != 3 is not possible since from the equalities, we know that 2 = 3. Thus, the given equalities and inequalities are inconsistent, return "No"



Example2:

Input: N = 4, equalities = [[1, 2], [3, 4]], inequalities = [[2, 3]]

From equalities, we get 1 = 2 and 3 = 4. and from inequalities, we get 2 != 3 , all of these equalities and inequalities hold, so return "Yes".


Here, the challenge is to handle situations where 1 = 2, 2 = 3, and we need to check indirect relation relation between 1 and 3.
Here Disjoint Set comes to our rescue. By merging (union(a, b) operation on disjoint set), we can group all equal numbers together.
